# 커밋 메시지 파일 경로
commit_message_file=$1

# 커밋 메시지 내용 읽기
commit_message=$(cat "$commit_message_file")

# 허용되는 Prefix 목록 (대소문자 구분)
allowed_prefixes=(
  "Feat"
  "Fix"
  "Docs"
  "Style"
  "Refactor"
  "Test"
  "Chore"
  "Design"
  "Comment"
  "Rename"
  "Remove"
  "Setting"
  "Merge"
  "!BREAKING CHANGE"
  "!HOTFIX"
)

# 커밋 메시지에서 Prefix 추출
# commit_prefix=$(echo "$commit_message" | sed -n '1s/^\s*\(\S\+\):.*/\1/p')
commit_prefix=$(echo "$commit_message" | awk '{print $1}' | sed 's/:.*//')

# Prefix가 허용되는지 검사
prefix_valid=false
for prefix in "${allowed_prefixes[@]}"; do
  if [ "$commit_prefix" = "$prefix" ]; then
    prefix_valid=true
    break
  fi
done

if [ "$prefix_valid" = false ]; then
  echo ""
  echo "⚠️  올바르지 않은 커밋 메시지 형식입니다."
  echo ""
  echo " Commit Message 포맷을 아래 예시와 같이 지켜주세요."
  echo " 사용가능한 commit의 Prefix는 아래와 같습니다."
  echo ""
  echo "반드시 콜론(:) 을 붙여야 합니다."
  echo ""
  echo "Feat:      새로운 기능 추가"
  echo "Fix:       버그 수정"
  echo "Docs:      문서 수정"
  echo "Style:     코드 포매팅, 세미콜론 누락 등 코드 자체의 변경이 없는 경우"
  echo "Refactor:  코드 리팩토링"
  echo "Test:      테스트 코드, 리팩토링 테스트 코드 추가"
  echo "Chore:     패키지 매니저 수정 등 기타 변경"
  echo "Design:    CSS 등 사용자 UI 디자인 변경"
  echo "Comment:   필요한 주석 추가 및 변경"
  echo "Rename:    파일 또는 폴더 명을 수정하거나 옮기는 작업만인 경우"
  echo "Remove:    파일을 삭제하는 작업만 수행한 경우"
  echo "Setting:   기초 세팅 관련"
  echo "Merge:     코드 병합"
  echo "!BREAKING CHANGE:  커다란 API 변경의 경우"
  echo "!HOTFIX:   급하게 치명적인 버그를 고쳐야 하는 경우"
  echo ""
  exit 1
fi
